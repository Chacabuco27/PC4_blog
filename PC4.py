# Antes de ejecutar un script de Python en Streamlit debes definir la carpeta donde se encuentra tus archivos
# cd ruta_de_tu_carpeta 
# o abrimos el folder desde visual Studio Code 

print("Sunim")
# Primero creamos un entorno virtual para instalar Streamlit y otras librer√≠as que necesitemos.
# python -m venv .venv
# Esto nos permite crear un entorno virtual donde instalaremos Streamlit 
# y observaremos la p√°gina web que se est√° generando en este script.

# Luego activamos el entorno virtual.
# En Windows:
# .venv\Scripts\activate
# En MacOS/Linux:
# source .venv/bin/activate

# Acontinuaci√≥n instalamos Streamlit 
# pip install Streamlit

# Este c√≥digo sirve para acceder una p√°gina web en tu navegador que te brinda informaci√≥n sobre Streamlit.
# Pero se ejecuta en la terminal Python de tu computadora, no en Jupyter Notebook.
# python -m streamlit hello

# Este comando sirve para ejecutar un script de Python en Streamlit.
# Pero se ejecuta en la terminal de tu computadora, no en Jupyter Notebook.
# OJO: Debes antes tener instalado Streamlit en tu computadora, debes antes definir la ruta de tus archivos y 
##     tener un script de Python (your_script.py) que quieras ejecutar en Streamlit.
# streamlit run your_script.py
# python -m streamlit run PC4.py

# Este c√≥digo sirve para hacer un primer programa en Streamlit.
import streamlit as st

# Generamos 3 p√°ginas en la aplicaci√≥n web de Streamlit.
# Generamos una p√°gina principal, otra donde contaran su experiencia aprendiendo a programar y una tercera donde presentar√°n sus gr√°ficos.

# Creamos la lista de p√°ginas
paginas = ['Inicio', 'Experiencia', 'Gr√°ficos']

# Creamos botones de navegaci√≥n tomando la lista de p√°ginas
pagina_seleccionada = st.sidebar.selectbox('Selecciona una p√°gina', paginas)

# Generamos condicionales para mostrar el contenido de cada p√°gina
if pagina_seleccionada == 'Inicio':

    # La funci√≥n st.markdown permite centrar y agrandar la letra del t√≠tulo de la web en Streamlit.
    st.markdown("<h1 style='text-align: center;'>El mundo de Chacabuco üìù</h1>", unsafe_allow_html=True)

    # <h1 style='text-align: center;'>Nombre de tu blog</h1>: Esto es una cadena de c√≥digo HTML. 
    # La etiqueta <h1> se utiliza para el encabezado principal de una p√°gina web, y 
    # el atributo style se utiliza para agregar estilos CSS. 
    # En este caso, el texto est√° alineado al centro (text-align: center;). 
    # Pueden agregar emojis en el texto de Markdown utilizando c√≥digos de emoji, por ejemplo:
    # <h1 style='text-align: center;'>Aqu√≠ escribe un nombre creativo para tu blog üìù</h1>
    # Tambi√©n pueden personalizar el color del texto utilizando el atributo style, por ejemplo:
    # <h1 style='text-align: center; color: blue;'>Nombre de tu blog</h1>
    # El texto dentro de las etiquetas <h1> ("Aqu√≠ escribe un nombre creativo para tu blog") es el contenido del encabezado.

    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown. 
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.

    # Creamos dos columnas separadas para la imagen y el texto
    col1, col2 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    # Columna izquierda: texto 
    # col2.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)
    # col1.image("Fotograf√≠a.jpg", caption='Desde mi lado sincero y divertido', width=300)
    texto = """
    <p>Mi nombre es Sunim Cardenas y me encuentro cursando el sexto ciclo de la carrera de Periodismo en la Pontificia Universidad Cat√≥lica del Per√∫ (PUCP). En el pasado, me cuestion√© si era la elecci√≥n adecuada y tambi√©n si era mi pasi√≥n. No llegu√© a ninguna conclusi√≥n, pero a diferencia de antes, hoy disfruto del proceso y cada vez me interesan esos aspectos period√≠sticos, como la cr√≥nica y la fotograf√≠a. 

<p>Aunque no parezca por mi rostro de eterna quincea√±era, estoy pr√≥xima a cumplir veinte a√±os el 27 de agosto. Si bien no tengo un apodo para mis amistades, en general, me gusta que se refieran a mi como Suni o Su. Incluso, mi padre suele llamarme de diversas maneras dependiendo de su humor. Los m√°s usados cuando est√° feliz y tranquilo son Chuky, Chacabuco o Chacabuquito, Tasmania y la lista contin√∫a. 

<p>En mi casa, somos cuatro: mi pap√°, mi abuela, Gamora (mi perro) y yo. Lamentablemente, mi mam√° falleci√≥ cuando ten√≠a siete a√±os; a pesar de ello, me siento feliz y agradecida con mi familia, sobre todo con el se√±or Juan (mi padre), quien me ha inculcado valores como el respeto y la responsabilidad. Recuerdo que en lugar de ver dibujos animados, mi mam√° Justina (abuela) y yo nos sent√°bamos a las 6 de la tarde para ver ‚ÄúLa Rosa de Guadalupe‚Äù. As√≠ fue como crec√≠ con el melodrama, parte fundamental en mi personalidad.
                 
<p>De esa manera, desarroll√© mi afinidad por las novelas desde muy peque√±a. Mi preferida es una novela turca: ‚Äú¬øQu√© culpa tiene Fatmagul?‚Äù Al llegar a la universidad, me interesaron las lecturas feministas y, con el curso de Narrativa dictado por la profesora Wurst en Letras, descubr√≠ mi pasi√≥n por la literatura; especialmente por los cuentos escritos por autoras latinoamericanas como M√≥nica Ojeda, Agustina Bazterrica, Fernanda Ampuero, Samanta Schweblin y Mariana Enr√≠quez. Toda esta influencia femenina, me han direccionado al estudio de g√©neros, al punto de cuestionarme constantemente qu√© es ser mujer. """
    
    col1.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)
    
    col2.image("Fotograf√≠a.jpg", caption='Desde mi lado sincero y divertido', width=300)
    texto_3 = """ 
    <p>Me gusta leer distintos g√©neros, entre mis preferidos distop√≠as y horror; Las cosas que perdimos en el fuego de Enr√≠quez y la Subasta de Ampuero, son mis preferidas por referirse al cuerpo femenino desde lo abyecto. La motivaci√≥n hacia estos temas, hizo que escribiera un ensayo sobre la maternidad ominosa para Los Juegos Florales el a√±o pasado, obteniendo as√≠ el segundo puesto en la categor√≠a ensayo. 

<p>Asimismo, desarroll√© una fascinaci√≥n por las pel√≠culas del UCM a los 10 a√±os en el preciso instante que mir√© La Era de Ultron. A pesar de su poco acogida por la audiencia, cada minuto estuve al borde de la silla y al finalizar solo quer√≠a saber m√°s de esos superh√©roes a los que jam√°s hab√≠a prestado atenci√≥n. Tambi√©n, me agrada realizar actividades en compa√±√≠a de mis amigas y mi familia, especialmente mis primos y primas. A veces, simplemente nos juntamos en mi casa para ver una pel√≠cula o en otros casos salimos a alg√∫n lugar sin objetivo m√°s que mero entretenimiento. Considero que son esas personas, incluida mi familia nuclear, las m√°s importantes en mi vida. """
    col2.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto_3}</div>", unsafe_allow_html=True)
    
    st.markdown("---")
    st.subheader("Mis personas favoritas")
    col3, col4 , col5, col6= st.columns(4)
    col3.image("abuelita.jpg", width=300)
    col3.image("amix3.jpg", width=300)
    col4.image("amix2.jpg", width=300)
    col5.image("amix1.jpg", width=300)
    col6.image("gamora.jpg",width=300)
    # col1.image("ellie.png", caption='Ellie', width=300): Esta l√≠nea est√° colocando una imagen en la primera columna (col1). 
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar. 
    # En este caso, la imagen es "ellie.png". 
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen, 
    # en este caso "Aqu√≠ puedes escribir una etiqueta debajo de la imagen". 
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 300 p√≠xeles.

    # En la segunda columna colocamos el texto: Debe contener una presentaci√≥n de ustedes
    # Deben presentarse: ¬øQui√©n eres?, ¬øDe d√≥nde eres?, ¬øQu√© estudias?, ¬øQu√© te gusta de tu carrera?, 
    # ¬øQu√© te gustar√≠a hacer en el futuro?, ¬øQu√© te gusta hacer en tu tiempo libre?

    # Las comillas triples (""") en Python se utilizan para definir cadenas multil√≠nea.
    
    # Mostramos el texto

    # <div style='text-align: justify; font-size: 15px;'>{texto}</div>: Esta es una cadena de c√≥digo HTML. 
    # La etiqueta <div> se utiliza para agrupar contenido en HTML. 
    # En este caso, el texto est√° justificado (text-align: justify;). 
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto} se reemplaza por el valor de la variable texto.

elif  pagina_seleccionada == 'Experiencia':

    # Agregamos un t√≠tulo
    st.markdown("<h1 style='text-align: center;'>No es tan complicado programar cuando tienes apoyo üíª</h1>", unsafe_allow_html=True)

    # En esta secci√≥n debes describir y comentar tu experiencia aprendiendo a programar
    # ¬øC√≥mo te sentiste al principio?, 
    # ¬øQu√© te ha ense√±ado la programaci√≥n?, ¬øQu√© te gusta de programar?, 
    # ¬øQu√© te gustar√≠a hacer con la programaci√≥n en el futuro? 

    # Agregar un  texto para la respuesta
    texto_2 = """
    <p>En un inicio, escribir fechas o simplemente ejecutar una palabra con print era tan sencillo. Al avanzar las pr√°cticas, el nivel se increment√≥ y mi aprendizaje se vio en jaque al no entender que est√°bamos haciendo. No obstante, el desempe√±o de la jefa de pr√°ctica Luisa incidi√≥ en la soluci√≥n de los ejercicios planteados. Desde mi experiencia, su predisposici√≥n con sus estudiantes aport√≥ en el inter√©s por el curso. Su compromiso, dedicaci√≥n y entre otras cualidades facilitaron la comprensi√≥n de lo complejo que resultaban algunos c√≥digos. 
 
<p>Mi parte favorita, y a la vez frustrante, era desarrollar los ejercicios de repaso para las primeras PCs. Pas√© noches enteras tratando de arreglar el c√≥digo y de entender el porqu√© del error. El tema de importar un PDF o una base de datos me sacaron ojeras por una semana, sumado a ello la desesperaci√≥n, mientras que la soluci√≥n se hallaba en la ortograf√≠a. Con la compa√±√≠a de Luisa, programar en Colab y Visual Studio Code se convirti√≥ en entretenido: el mundo de la programaci√≥n simplifica nuestra realidad, aunque te compliques toda una vida. 

<p>Aparte de la JP, mi enamorado fue pieza clave en este curso. Sus conocimientos en programaci√≥n adquiridos por su carrera de Ingenier√≠a Mecatr√≥nica simplificaron los ejercicios a entendibles, incluso cuando parec√≠an imposibles. Un caf√© Kirma y su presencia en las madrugadas determinaron la compresi√≥n de temas como las condicionales (if-elif-else) y los bucles (for y while) por una sola raz√≥n: mi salud mental se vio trastocada al punto de converger en la locura debido a la funcionalidad de range  y break. 

<p>Hoy en d√≠a, considero que el lenguaje de programaci√≥n resulta beneficioso para todo √°mbito. En un futuro, me gustar√≠a generar un juego multijugador que permita mejorar los cuatros ejes b√°sicos para aprender el idioma: reading, listening, writing y speaking. La particularidad de este producto radica en que cada jugador puede escoger la tem√°tica que mejor domin√©; de esa manera, puede generar un equipo con sus amigos y as√≠ empezar por un camino que requiera cada una de sus habilidades. 
 
    """

    # Mostramos el texto
    st.markdown(f"<div style='text-align: justify; font-size: 18px;'>{texto_2}", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto_2}</div>: Esta es una cadena de c√≥digo HTML.
    # La etiqueta <div> se utiliza para agrupar contenido en HTML.
    # En este caso, el texto est√° justificado (text-align: justify;).
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto_2.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto_2} se reemplaza por el valor de la variable texto.

    # Agregamos un subt√≠tulo para el video
    st.markdown("<h2 style='text-align: center;'>Jugar y programar: Una fusi√≥n √∫nica üé•</h2>", unsafe_allow_html=True)
    
    # <h2 style='text-align: center;'>Aqu√≠ escribe un nombre creativo para presentar tu video</h2>: Esta es una cadena de c√≥digo HTML.
    # La etiqueta <h2> se utiliza para un encabezado de segundo nivel en una p√°gina web.
    # El texto est√° centrado (text-align: center;).
    # El texto dentro de las etiquetas <h2> ("Aqu√≠ escribe un nombre creativo para presentar tu video") es el contenido del encabezado.
    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown.
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.
    # Puedes agregar emojis en el texto de Markdown utilizando c√≥digos de emoji.
    # Por ejemplo, puedes agregar un emoji de video üé• 

    # Agregamos un video realizado en las practicas anteriores
    st.video("https://www.youtube.com/watch?v=kKu_u58KoUY")
    
    # st.video("https://www.youtube.com/watch?v=X_Z7d04x9-E"): Esta l√≠nea est√° mostrando un video en la aplicaci√≥n web.
    # La funci√≥n video toma como primer argumento la URL del video que se desea mostrar.
    # En este caso, la URL es "https://www.youtube.com/watch?v=X_Z7d04x9-E".
    # Puedes cambiar la URL por la de tu video en YouTube o en otra plataforma de video.

    # O creamos un bot√≥n para ir al enlace del video con button
    # st.markdown(f"<div style='text-align: center;'><a href='https://drive.google.com/file/d/1REvRXSu3GuGD73w8j44135MkRiezd0gP/view?usp=drive_link' target='_blank'><button>Ver video</button></a></div>", unsafe_allow_html=True) 

    # <div style='text-align: center;'><a href='https://drive.google.com/file/d/1REvRXSu3GuGD73w8j44135MkRiezd0gP/view?usp=drive_link' target='_blank'><button>Ver video</button></a></div>:
    # Esta es una cadena de c√≥digo HTML.
    # La etiqueta <div> se utiliza para agrupar contenido en HTML.
    # En este caso, el contenido est√° centrado (text-align: center;).
    # La etiqueta <a> se utiliza para crear un enlace.
    # El atributo href especifica la URL a la que se dirige el enlace.
    # En este caso, la URL es 'https://drive.google.com/file/d/1REvRXSu3GuGD73w8j44135MkRiezd0gP/view?usp=drive_link'.
    # El atributo target='_blank' indica que el enlace se abrir√° en una nueva pesta√±a del navegador.
    # La etiqueta <button> se utiliza para crear un bot√≥n.
    # El texto dentro de las etiquetas <button> ("Ver video") es el contenido del bot√≥n.
    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown.
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.
    # Puedes cambiar la URL por la de tu video en YouTube o en otra plataforma de video.
    
else:

    # Agregamos un t√≠tulo para la p√°gina de gr√°ficos
    st.markdown("<h1 style='text-align: center;'>Estad√≠stica con Python resulta m√°s sencillo e interactivo</h1>", unsafe_allow_html=True)

    # Creamos una lista de gr√°ficos
    graficos = ['Word Cloud on fact-checking', 'Gr√°fico de barras horizontales de familias ling√º√≠sticas', 'Mapa 5 pel√≠culas favoritas']

    # Creamos un cuadro de selecci√≥n en la p√°gina de gr√°ficos
    grafico_seleccionado = st.selectbox('Selecciona un gr√°fico', graficos)

    # El cuadro de selecci√≥n se crea con la funci√≥n selectbox.
    # El primer argumento es el texto que se muestra en el cuadro de selecci√≥n.
    # El segundo argumento es una lista de opciones que se pueden seleccionar.
    # En este caso, las opciones son los elementos de la lista graficos.
    # La opci√≥n seleccionada se asigna a la variable grafico_seleccionado.
    # La variable grafico_seleccionado se utiliza para mostrar el gr√°fico correspondiente en la aplicaci√≥n web.
    

    # Mostramos el gr√°fico seleccionado
    if grafico_seleccionado == 'Word Cloud on fact-checking':
        st.markdown("<div style='text-align: justify; font-size: 20px;'> <p>¬øC√≥mo tener la certeza de que una noticia sobre el COVID-19 expuesta en las redes sociales est√° certificada por un especialista de la salud? Por medio de un recurso interactivo como una nube de palabras creada con el programa Python, el usuario podr√° identificar palabras clave en un contenido de salud difundido en la red social que contenga informaci√≥n veraz. De esta manera, se lograr√° determinar el grado de credibilidad de la informaci√≥n expuesta en distintos medios que ofrece Internet. <p>Con Word Cloud on fact-checking, la clasificaci√≥n de contenidos informativos y desinformativos contribuye a dimensionar el impacto de la desinformaci√≥n en variadas plataformas. A partir de esta herramienta, se busca destacar la importancia de implementar estrategias de verificaci√≥n de informaci√≥n (fact-checking) y alfabetizaci√≥n digital como medidas necesarias para contrarrestar la propagaci√≥n de noticias falsas sobre salud en redes sociales.</div>", unsafe_allow_html=True)
        st.image("nube_fact_checking.png", caption='Nube de palabras: Identificaci√≥n veraz de noticias sobre salud', width=700)
        pass
    elif grafico_seleccionado == 'Gr√°fico de barras horizontales de familias ling√º√≠sticas':
        st.markdown("<div style='text-align: justify; font-size: 20px;'> <p>Sab√≠as que existieron 102 lenguas originarias y actualmente solo quedan 47. Seg√∫n el registro oficial del Ministerio de Cultura, reconoce el uso activo de 47 lenguas, aunque algunas de ellas se encuentren en peligro de extinci√≥n; mientras que el primer dato incluye a lenguas ya extintas. Sin embargo, esta clasificaci√≥n extensa deriva de las variantes dialectales que algunos acad√©micos consideran pertinente. Loukotka (1968) reconoc√≠a m√°s de 90 familias ling√º√≠sticas con subdivisiones en el √°rea amaz√≥nica. <p>A partir de una base de datos, que identifica 102 lenguas originarias, se realiz√≥ un gr√°fico de barras de la cantidad de lenguas originarias por Familias Ling√º√≠sticas. Este recurso fue creado con Python, lo cual permiti√≥ sintetizar la informaci√≥n de manera did√°ctica para la comprensi√≥n del lector. Asimismo, se identific√≥ un n√∫mero de 17 familias, entre ellas Quechuan, la cual agrupa alrededor de 35 lenguas originarias.</div>", unsafe_allow_html=True)
        st.image("lenguas_originarias.png", caption='Gr√°fico de familias ling√º√≠sticas', width=700)
        pass
    elif grafico_seleccionado == 'Mapa 5 pel√≠culas favoritas':
        st.markdown("<div style='text-align: justify; font-size: 20px;'>Si eres un amante del cine, esta herramienta te gustar√°, ya que podr√°s identificar la diversidad de producciones alrededor del mundo. Imagina tu top 5 de pel√≠culas y distribuyelas en puntos sobre el globo terr√°queo. Esta imagen preconcebida es posible con el programa Python a partir de importar la librer√≠a Folium. De esta manera, ubiqu√© los films de mi preferencia en un mapa, despu√©s de desarrollar una lista, aunque infinita, seleccion√© producciones significativas para m√≠: The Shape of Water de Guillermo del Toro, Amelie de Jean-Pierre Jeunet, La vita e bella de Roberto Benigni, Before Sunrise de Richard Linklater y The Pianist de Roman Polanski. </div>", unsafe_allow_html=True)
        # Si "mapa_cusco.html" es un archivo HTML (no una imagen), debes mostrarlo con st.components.v1.html
        import streamlit.components.v1 as components
        with open("mapa_descargar.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        components.html(html_content, height=800)
        pass

    # if grafico_seleccionado == 'Gr√°fico de barras verticales de lenguas aisladas':
    # st.markdown("<div style='text-align: justify; font-size: 20px;'>Aqu√≠ debe ir una breve interpretaci√≥n de tu gr√°fico</div>", unsafe_allow_html=True)
    # st.image("aisladas_base_datos.png", caption='Gr√°fico de lenguas aisladas', width=500): Esta l√≠nea est√° mostrando una imagen en la aplicaci√≥n web.
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar.
    # En este caso, la imagen es "aisladas_base_datos.png".
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen,
    # en este caso "Gr√°fico de lenguas aisladas".
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 500 p√≠xeles.

    # elif grafico_seleccionado == 'mapa_cusco':
    # import streamlit.components.v1 as components
    # with open("mapa_cusco.html", "r", encoding="utf-8") as f:
    #     html_content = f.read()
    # components.html(html_content, height=500): Esta l√≠nea est√° mostrando un archivo HTML en la aplicaci√≥n web.
    # La funci√≥n components.html toma como primer argumento el contenido HTML que se desea mostrar.
    # En este caso, el contenido HTML se lee desde el archivo "mapa_cusco.html".
    # El argumento height se utiliza para especificar la altura del contenido HTML, en este caso 500 p√≠xeles.
    
    # Si no tenemos el archivo HTML, podemos agregar el c√≥digo para crear el mapa de Cusco directamente en Streamlit.
    # Primero debes crear el diccionario de coordenadas del mapa de Cusco.
    # Luego debes crear el mapa utilizando la librer√≠a folium y streamlit-folium.
    # pip install folium
    # pip install streamlit-folium
        #import folium
        #from streamlit_folium import st_folium

        # Mostrar el mapa en Streamlit
        #st_folium(mapa_cusco, width=700, height=500)
    
